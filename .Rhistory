as(., "Spatial")
st_crs(geocenter) = 27700
geocentersp <- geocenter %>%
as(., "Spatial")
##########
#计算带宽
bandwidth <- gwr.sel(wellbeing_2013~
population_density_persons_per_sq_km_2013+
median_household_income_2013+
open_space_with_access_rate_2013,
data = wardsinfosp,
coords=geocentersp,
adapt=T)
#GWR
gwr.model = gwr(wellbeing_2013~
population_density_persons_per_sq_km_2013+
median_household_income_2013+
open_space_with_access_rate_2013,
data = wardsinfosp,
coords=geocentersp,
adapt=bandwidth,
hatmatrix=TRUE,
se.fit=TRUE)
results <- as.data.frame(gwr.model$SDF)
#names(results)
#提取系数分布
wardsinfo <- wardsinfo %>%
mutate(coefincome = (results$median_household_income_2013)*1000,
coefpopdens = (results$population_density_persons_per_sq_km_2013)*1000,
coefopenspac = results$open_space_with_access_rate_2013,
)
#收入系数分布图
tm_shape(wardsinfo) +
tm_polygons(col = "coefincome",
palette = "RdYlBu",
alpha = 0.65)
#人口密度系数分布图
tm_shape(wardsinfo) +
tm_polygons(col = "coefpopdens",
palette = "RdYlBu",
alpha = 0.65)
#绿化系数分布图
tm_shape(wardsinfo) +
tm_polygons(col = "coefopenspac",
palette = "RdYlBu",
alpha = 0.65)
##########
#地理加权回归完成
##########
##########################
par(mfrow=c(2,2))
plot(model_final)
par(mfrow=c(2,2))
plot(gwr.model)
par(mfrow=c(2,2))
plot(model2)
tmap_mode("view")
qtm(wardsmap)
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
library(broom)
library(corrr)
library(tidypredict)
library(spatialreg)
library(spgwr)
tmap_mode("view")
qtm(wardsmap)
tmap_mode("view")
qtm(wardsinfo,
fill = "wellbeing_2013",
borders = NULL,
fill.palette = "Blues")
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "wellbeing_2013",
borders = NULL,
fill.palette = "Greens")
tmap_mode("view")
qtm(wardsinfo,
fill = "Median_household_income_2013",
borders = NULL,
fill.palette = "Greens")
View(wardsinfo)
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "median_household_income_2013",
borders = NULL,
fill.palette = "Greens")
tmap_mode("view")
qtm(wardsinfo,
fill = "Open_space_with_access_rate_2013",
borders = NULL,
fill.palette = "Greens")
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "open_space_with_access_rate_2013",
borders = NULL,
fill.palette = "Greens")
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "population_density_persons_per_sq_km_2013",
borders = NULL,
fill.palette = "Reds")
tmap_mode("view")
qtm(wardsinfo,
fill = "obese_2013_new",
borders = NULL,
fill.palette = "Reds")
##########
##########################
##########
#loading map of wards
wardsmap <- dir_info(here::here("original-data",
"statistical-gis-boundaries-london",
"ESRI"))%>%
dplyr::filter(str_detect(path,
"London_Ward_CityMerged.shp$"))%>%
dplyr::select(path)%>%
pull()%>%
st_read()
#check the map
tmap_mode("view")
qtm(wardsmap)
##########
#loading wellbeing score
wardswellbeing <- read_csv(here::here("processed_data_new",
"wellbeing.csv"),
na = c("", "NA", "n/a"),
locale = locale(encoding = 'Latin1'),
col_names = TRUE)
#put it into wardsinfo
wardsinfo <- wardsmap%>%
left_join(.,
wardswellbeing,
by = c("GSS_CODE" = "Ward Code"))%>%
clean_names()
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "wellbeing_2013",
borders = NULL,
fill.palette = "Greens")
##########
#loading household income
wardsincome <- read_csv(here::here("processed_data_new",
"income.csv"))
#put it into wardsinfo
wardsinfo <- wardsinfo%>%
left_join(.,
wardsincome,
by = c("gss_code" = "Code"))%>%
clean_names()
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "median_household_income_2013",
borders = NULL,
fill.palette = "Greens")
##########
#loading open space and access rate
wardsossrate <- read_csv(here::here("processed_data_new",
"space.csv"))
#put it into wardsinfo
wardsinfo <- wardsinfo%>%
left_join(.,
wardsossrate,
by = c("gss_code" = "Ward_GSS_CODE"))%>%
clean_names()
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "open_space_with_access_rate_2013",
borders = NULL,
fill.palette = "Greens")
##########
#loading population density
wardspopden <- read_csv(here::here("processed_data_new",
"density.csv"))
#put it into wardsinfo
wardsinfo <- wardsinfo%>%
left_join(.,
wardspopden,
by = c("gss_code" = "New code"))%>%
clean_names()
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "population_density_persons_per_sq_km_2013",
borders = NULL,
fill.palette = "Reds")
##########
#loading childhood obesity rate
wardsobeschool <- read_csv(here::here("processed_data_new",
"obesity.csv"))
#put it into wardsinfo
wardsinfo <- wardsinfo%>%
left_join(.,
wardsobeschool,
by = c("gss_code" = "Code"))%>%
clean_names()
#check the spatial distribution
tmap_mode("view")
qtm(wardsinfo,
fill = "obese_2013_new",
borders = NULL,
fill.palette = "Reds")
##########
##loading finished
##########
# distribution of wellbeing (y)
ggplot(wardsinfo, aes(x=wellbeing_2013)) +
geom_histogram(aes(y = ..density..),
binwidth = 3) +
geom_density(colour="blue",
size=1,
adjust=1)
#normal distribution!
##########
# distribution of household income (x1)
ggplot(wardsinfo, aes(x=median_household_income_2013)) +
geom_histogram(aes(y = ..density..),
binwidth = 1000) +
geom_density(colour="blue",
size=1,
adjust=1)
# log-transformation
ggplot(wardsinfo, aes(x=log(median_household_income_2013))) +
geom_histogram(aes(y = ..density..),
binwidth = 0.025) +
geom_density(colour="blue",
size=1,
adjust=1)
##########
#distribution of open space & access rate (x2)
ggplot(wardsinfo, aes(x=open_space_with_access_rate_2013)) +
geom_histogram(aes(y = ..density..),
binwidth = 2.5) +
geom_density(colour="blue",
size=1,
adjust=1)
# powered by 0.5
ggplot(wardsinfo, aes(x=(open_space_with_access_rate_2013)^(1/2)/5)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.05) +
geom_density(colour="blue",
size=1,
adjust=1)
##########
#distribution of population density (x3)
ggplot(wardsinfo, aes(x=population_density_persons_per_sq_km_2013)) +
geom_histogram(aes(y = ..density..),
binwidth = 500) +
geom_density(colour="blue",
size=1,
adjust=1)
#powered by 0.5
ggplot(wardsinfo, aes(x=(population_density_persons_per_sq_km_2013)^(1/2)/100)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.05) +
geom_density(colour="blue",
size=1,
adjust=1)
##########
#distribution ofobesity rate (x4)
ggplot(wardsinfo, aes(x=obese_2013_new)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.01) +
geom_density(colour="blue",
size=1,
adjust=1)
#powered by 1.5
ggplot(wardsinfo, aes(x=(obese_2013_new)^(1.5)*10)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.05) +
geom_density(colour="blue",
size=1,
adjust=1)
##########
# distribution analyses and transformation finished
##########
# linear correlation with population density
Regressiondata<- wardsinfo%>%
clean_names()%>%
dplyr::select(wellbeing_2013,
population_density_persons_per_sq_km_2013)
model1 <- Regressiondata %>%
lm(wellbeing_2013 ~
population_density_persons_per_sq_km_2013,
data=.)
# information of this model
tidy(model1)
glance(model1)
Regressiondata %>%
tidypredict_to_column(model1)
##########
# the residuals of the model (population density)
model_data <- model1 %>%
augment(., Regressiondata)
model_data%>%
dplyr::select(.resid)%>%
pull()%>%
qplot()+
geom_histogram()
##########
#Four variables regression
Regressiondata2<- wardsinfo%>%
clean_names()%>%
dplyr::select(wellbeing_2013,
median_household_income_2013,
population_density_persons_per_sq_km_2013,
obese_2013_new,
open_space_with_access_rate_2013)
model2 <- lm(wellbeing_2013 ~ log(median_household_income_2013) +
population_density_persons_per_sq_km_2013+
obese_2013_new+
open_space_with_access_rate_2013,
data = Regressiondata2)
tidy(model2)
#residuals vs fitted plot
par(mfrow=c(2,2))
plot(model2)
##########
#correlation
Correlation <- wardsinfo %>%
st_drop_geometry()%>%
dplyr::select(wellbeing_2013,
median_household_income_2013,
population_density_persons_per_sq_km_2013,
open_space_with_access_rate_2013) %>%
correlate() %>%
focus(-wellbeing_2013, mirror = TRUE)
rplot(Correlation)
#VIF and multicollinearity
vif(model2)
position <- c(8:11)
Correlation_all<- wardsinfo %>%
st_drop_geometry()%>%
dplyr::select(position)%>%
correlate()
rplot(Correlation_all)
##########
# without obesity rate
Regressiondata3<- wardsinfo%>%
clean_names()%>%
dplyr::select(wellbeing_2013,
median_household_income_2013,
population_density_persons_per_sq_km_2013,
open_space_with_access_rate_2013)
model3 <- lm(wellbeing_2013 ~ log(median_household_income_2013) +
population_density_persons_per_sq_km_2013+
open_space_with_access_rate_2013,
data = Regressiondata3)
#information of the model
tidy(model3)
#residuals
model_data3 <- model3 %>%
augment(., Regressiondata3)
wardsinfo <- wardsinfo %>%
mutate(model3resids = residuals(model3))
#residuals vs fitted plot
par(mfrow=c(2,2))
plot(model3)
##########
#residuals distribution map
DW <- durbinWatsonTest(model3)
tidy(DW)
tmap_mode("view")
tm_shape(wardsinfo) +
tm_polygons("model3resids",
palette = "RdYlBu")
##########
#OSL regression finish
##########
#calculation of geometry center
geocenter <- wardsinfo%>%
st_centroid()%>%
st_geometry()
LWard_nb <- wardsinfo %>%
poly2nb(., queen=T)
Lward.queens_weight <- LWard_nb %>%
nb2listw(., style="C")
##########
#calculation of K-nearest neighbor
knn_wards <-geocenter %>%
knearneigh(., k=4)
LWard_knn <- knn_wards %>%
knn2nb()
Lward.knn_4_weight <- LWard_knn %>%
nb2listw(., style="C")
##########
#processing of the geometry center and K-nearest neighbor
Queen <- wardsinfo %>%
st_drop_geometry()%>%
dplyr::select(model3resids)%>%
pull()%>%
moran.test(., Lward.queens_weight)%>%
tidy()
Nearest_neighbour <- wardsinfo %>%
st_drop_geometry()%>%
dplyr::select(model3resids)%>%
pull()%>%
moran.test(., Lward.knn_4_weight)%>%
tidy()
Queen
##########
##########
##########
#three independent variables remaining
myvars <- wardsinfo %>%
dplyr::select(wellbeing_2013,
population_density_persons_per_sq_km_2013,
median_household_income_2013,
open_space_with_access_rate_2013)
#check the correlation
Correlation_myvars <- myvars %>%
st_drop_geometry()%>%
correlate()
#linear regression of these three independent variables
model_final <- lm(wellbeing_2013~
population_density_persons_per_sq_km_2013+
median_household_income_2013+
open_space_with_access_rate_2013,
data = myvars)
tidy(model_final)
#residuals
wardsinfo <- wardsinfo %>%
mutate(residuals = residuals(model_final))
#residuals vs fitted plot
par(mfrow=c(2,2))
plot(model_final)
#residuals distribution map
qtm(wardsinfo, fill = "residuals", alpha=0.2)
##########
#testing
final_model_Moran <- wardsinfo %>%
st_drop_geometry()%>%
dplyr::select(residuals)%>%
pull()%>%
moran.test(., Lward.knn_4_weight)%>%
tidy()
final_model_Moran
##########
#the transform of data format and coordinate system
st_crs(wardsinfo) = 27700
wardsinfosp <- wardsinfo %>%
as(., "Spatial")
st_crs(geocenter) = 27700
geocentersp <- geocenter %>%
as(., "Spatial")
##########
#calculation of bandwidth
bandwidth <- gwr.sel(wellbeing_2013~
population_density_persons_per_sq_km_2013+
median_household_income_2013+
open_space_with_access_rate_2013,
data = wardsinfosp,
coords=geocentersp,
adapt=T)
#GWR
gwr.model = gwr(wellbeing_2013~
population_density_persons_per_sq_km_2013+
median_household_income_2013+
open_space_with_access_rate_2013,
data = wardsinfosp,
coords=geocentersp,
adapt=bandwidth,
hatmatrix=TRUE,
se.fit=TRUE)
results <- as.data.frame(gwr.model$SDF)
#names(results)
#coefficients
wardsinfo <- wardsinfo %>%
mutate(coefincome = (results$median_household_income_2013)*1000,
coefpopdens = (results$population_density_persons_per_sq_km_2013)*1000,
coefopenspac = results$open_space_with_access_rate_2013,
)
#coefficients distribution map of household income
tm_shape(wardsinfo) +
tm_polygons(col = "coefincome",
palette = "RdYlBu",
alpha = 0.65)
#coefficients distribution map of population density
tm_shape(wardsinfo) +
tm_polygons(col = "coefpopdens",
palette = "RdYlBu",
alpha = 0.65)
#coefficients distribution map of open space with access rate
tm_shape(wardsinfo) +
tm_polygons(col = "coefopenspac",
palette = "RdYlBu",
alpha = 0.65)
##########
#GWR finish
##########
#END
##########################
